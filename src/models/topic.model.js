// noinspection JSUnresolvedReference

/**
 * @name - topic.model
 * @module models/topic.model
 * @description - This file contains the model for the topic module / schema
 * @param {Object} User - User model
 * @param {Object} sequelize - Sequelize object
 * @param {Object} Sequelize - Sequelize module
 * @returns {Object} - Returns object containing all the models
 */
module.exports = (User, sequelize, Sequelize) => {

  /**
   * @type {Model}
   * @name Topic
   * @description - This model contains all the topic info
   * @property {Number} id - Unique identifier for the topic
   * @property {Number} author - Author of who created the topic
   * @property {String} hash - Unique hash for the topic, usually generated by the hash algorithms
   * @property {String} name - Name of the topic
   * @property {String} slug - Unique slug for the topic
   * @property {String} about - Description of the topic
  */
  const Topic = sequelize.define("topics", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      author: {
        type: Sequelize.INTEGER,
        allowNull: false
      },
      hash: {
        type: Sequelize.STRING,
        unique: true,
        allowNull: true
      },
      name: {
        type: Sequelize.STRING,
        allowNull: false
      },
      slug: {
        type: Sequelize.STRING,
        unique: true,
        allowNull: false
      },
      about: {
        type: Sequelize.TEXT,
        allowNull: true
      },
    },
    {
      schema: 'topic',
      freezeTableName: true,
      indexes: [
        {
          unique: true,
          fields: ['id', 'slug', 'hash']
        },
        {
          fields: ['name', 'author', 'about']
        }
      ]
    });

  /**
   * @type {Model}
   * @name Tagged
   * @description - This model contains all the items tagged to a topic
   * @property {Number} id - Unique identifier for the tagged
   * @property {Number} topic - Topic id
   * @property {Number} target - Target id, A target model instance id where the topic is tagged
  */
  const Tagged = sequelize.define("tagged", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      topic: {
        type: Sequelize.INTEGER,
        allowNull: false
      },
      target: {
        type: Sequelize.INTEGER,
        allowNull: false
      },
    },
    {
      schema: 'topic',
      freezeTableName: true,
      indexes: [
        {
          unique: true,
          fields: ['id']
        },
        {
          fields: ['topic', 'target']
        }
      ]
    });

  /**
   * @type {Model}
   * @name Subscribe
   * @description - This model contains all the subscribers to a topic
   * @property {Number} id - Unique identifier for the subscriber record
   * @property {Number} author - Author who subscribed to the topic
   * @property {String} email - Email of the subscriber
   * @property {Number} topic - Topic which user is subscribed to
  */
  const Subscribe = sequelize.define("subscribers", {
      id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      author: {
        type: Sequelize.INTEGER,
        allowNull: false
      },
      email: {
        type: Sequelize.STRING,
        allowNull: false
      },
      topic: {
        type: Sequelize.INTEGER,
        allowNull: false
      },
    },
    {
      schema: 'topic',
      freezeTableName: true,
      indexes: [
        {
          unique: true,
          fields: ['id']
        },
        {
          fields: ['author', 'topic']
        }
      ]
    });

  // Defining the associations
  User.hasMany(Topic, { foreignKey: 'author' });
  Topic.belongsTo(User, { foreignKey: 'author', as: 'user_topics', onDelete: 'CASCADE' });

  Topic.hasMany(Tagged, { foreignKey: 'topic' });
  Tagged.belongsTo(Topic, { foreignKey: 'topic', as: 'topic_tagged', onDelete: 'CASCADE' });

  Topic.hasMany(Subscribe, { foreignKey: 'topic' });
  Subscribe.belongsTo(Topic, { foreignKey: 'topic', as: 'topic_subscribers', onDelete: 'CASCADE' });

  // Returning the models
  return { Topic, Tagged, Subscribe }
}